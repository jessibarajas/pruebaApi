swagger: '2.0'
schemes:
  - https
host: test.ired.mx
basePath: /api/soap/v2/soap.php
info:
  description: |
    Este es un ejemplo de una api de iRED.
    Puedes encontrar mas información acerca de iRED en
    [https://ired.mx](https://ired.mx).
    # Introducción
    iRED Dispone de una API (interfaz de programación de aplicaciones, (del inglés: Application Programming Interface), que permite mediante una interfaz simple,
    potente y segura, desarrollar aplicaciones para la obtención de los datos de operación de su compañía.
    Este documento está dirigido a personas con conocimiento básico para el desarrollo de software, servicios web (WebServices) y la interfaz de usuario de iRED.
    
    La API de iRED está basada en el protocolo **SOAP** (del inglés Simple Object Access Protocol). 
    El protocolo SOAP es un protocolo estándar que define como dos objetos en diferentes entornos pueden comunicarse entre si, mediante intercambio de mensajes en formato XML.
    # Autenticación
    <!-- ReDoc-Inject: <security-definitions> -->

    # Errores
    Cuando una llamada a una función de la API de iRED no se completó de una manera satisfactoria, 
    se retornará un error con un código y una descripción de la excepción, estos errores serán retornados 
    en un objeto de tipo `SoapFault`. Un objeto SOAP Fault contiene un error y su estado de un mensaje SOAP.

    Algunos ejemplos de estos errores son los siguientes:

    Código de error  | Error | Descripción | Llamada
    ----------------|-------------|--------- | --------- 
    `10` | invalid_login | Login attempt failed please check the username and password' | `login`
    `102` | module_not_found | No se encontró el modulo | `getElements`
    `103` | no_file | No existe el archivo | `getElements`
    `104` | no_class | No se encontró la clase o el metodo | `getElements`
    `105` | folio_not_found | No se encontró el folio | `getElements`
    `106` | date_not_found | No se encontraron datos en el rango de fechas ingresado | `getElements`
    `107` | folioDesde_not_found | No se encontraron datos a partir del folio ingresado | `getElements`
    `108` | invalid_filters | Filtros no válidos | `getElements`
    `109` | invalid_date | Fechas no válidas | `getElements`
    `110` | invalid_range | Rango incorrecto de fechas | `getElements`
    `111` | invalid_role | Rol no válido | `getElements`
    `112` | no_numeric | El folio debe de ser un número | `getElements`
    `1008` | password_expired | Your password has expired. Please provide a new password. | `login`
    `1009` | lockout_reached | You have been locked out of the Sugar application and cannot log in using existing password. Please contact your Administrator. | `login`

  version: 1.0.0
  title: iRED
  termsOfService: 'https://ired.mx/terms/'
  contact:
    email: soporte@ired.mx
  x-logo:
    url: 'iRED.png'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: iniciar sesión
  - name: cerrar sesión
  - name: obtener elementos
x-tagGroups:
  - name: General
    tags:
      - iniciar sesión
      - cerrar sesión
      - obtener elementos
securityDefinitions:
  login:
    description: |
      Para poder establecer una conexión a la API de iRED, será necesario contar con una cuenta de iRED previamente registrada así como conocer el password asignado a esta cuenta.
      
      ```
      login(user_auth, application)
      ```
      Es importante cerrar la sesión al finalizar de utilizarla, ya que se restringe a 3 sesiones simultaneas por usuario,
      si no cierra sus sesiones, el sistema restringirá nuevas sesiones hasta que la sesión sea terminada automáticamente por inactividad.
      
      ```
      logout(session)
      ```
    type: basic
x-servers:
  - url: app.ired.mx/api/soap/v2/soap.php
    description: Servidor iRED
  - url: test.ired.mx/api/soap/v2/soap.php
    description: Servidor Test iRED
paths:
  /login:
    post:
      tags:
        - iniciar sesión
      summary: login
      description: Se identifica ante la aplicación iRED. La llamada devuelve un `ID de sesión`, que se utiliza para las llamadas posteriores para autenticar con el sistema.
      consumes:
        - application/xml
      produces:
        - application/xml
      parameters:
        - in: body
          name: body
          description: "\n\n## Sintaxis\nlogin(user_auth, application)"
          schema:
            $ref: '#/definitions/LoginSchema'
      responses:
        '200':
          description: "Consulta exitosa"
          schema:
            $ref: '#/definitions/LoginResp'
        '500':
          description: SoapFault
          schema: 
            $ref: '#/definitions/SoapFault'
          examples:
            application/json: |
              <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
                <SOAP-ENV:Body>
                  <SOAP-ENV:Fault>
                    <faultcode xsi:type="xsd:int">10</faultcode>
                    <faultactor xsi:type="xsd:string"/>
                    <faultstring xsi:type="xsd:string">Invalid Login</faultstring>
                    <detail xsi:type="xsd:string">Login attempt failed please check the username and password</detail>
                  </SOAP-ENV:Fault>
                </SOAP-ENV:Body>
              </SOAP-ENV:Envelope>
      x-code-samples:
        - lang: XML
          source: |
            <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="" 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
              xmlns:ns2="http://xml.apache.org/xml-soap" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                  <ns1:login>
                      <param0 xsi:type="ns2:Map">
                          <item>
                              <key xsi:type="xsd:string">user_name</key>
                              <value xsi:type="xsd:string">soporte@ired.mx</value>
                          </item>
                          <item>
                              <key xsi:type="xsd:string">password</key>
                              <value xsi:type="xsd:string">3015ca4f270b6938b27c95863174a8db</value>
                          </item>
                      </param0>
                  </ns1:login>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
  /getElements:
    post:
      tags:
        - obtener elementos
      summary: getElements
      description: |
        Obtiene objetos de información de un módulo, dando la posibilidad de especificar un filtro.
        En la respuesta regresa un arreglo de objetos JSON del módulo consultado.

        Por ejemplo la siguiente consulta exitosa al modulo de `servicios`:
        ```xml
        <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <getElementsResponse>
              <return xsi:type="xsd:string">{"folio":"1589","cliente":{"nombre":"Pegasus Control SA de CV","rfc":"PCO960701A49"},"fechaSurtido":"2017-03-23 15:09:02","conductor":{"nombre":"Juan García","tarjeta":"1111222233334444","usuario":"jgarcia","vehiculo":{"noEconomico":"82","placas":"JMM1289","grupo":null,"odometro":"72362"}},"cantidad":"26.32","producto":"Pemex Magna","subtotal":"363.75000,"tasaImpuesto":"16.0000","importeImpuesto":"58.2000","total":"431.6000","codigoEstacion":"ES66665","autorizacion":"180","tipoPago":"2","valeUsado":null}</return>
            </getElementsResponse>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
        ```
      consumes:
        - application/xml
      produces:
        - application/xml
      parameters:
        - in: body
          name: body
          description: "Sintaxis: getElements(session, module, filters)"
          schema:
            $ref: '#/definitions/Get'
          x-examples:
            application/json:
              session: fqs5726ta...8oqm4kh76
              module: servicios
              filters:
                folio: 1589
                folioDesde: 
                fechaInicio: 
                fechaFin: 
      responses:
        '200':
          description: "Consulta exitosa de servicios"
          schema:
            $ref: '#/definitions/Servicio'
        '290':
          description: "Consulta exitosa de creditos"
          schema:
            $ref: '#/definitions/Credito'
        '500':
          description: SoapFault
          schema: 
            $ref: '#/definitions/SoapFault'
      security:
        - api_key: []
      x-code-samples:
        - lang: JSON (creditos)
          source: |
            {
              "session": "fqs5726ta...8oqm4kh76",
              "module": "creditos",
              "filters": {
                "codigoEstacion": "ES12345",
                "rfcCliente": null,
              }
            }
        - lang: XML (servicios)
          source: |
            <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <SOAP-ENV:Body>
                <ns1:getElements>
                    <param0 xsi:type="xsd:string">fqs5726ta...8oqm4kh76</param0>
                    <param1 xsi:type="xsd:string">servicios</param1>
                    <param2 xsi:type="xsd:string">{"folio":"5472", "folioDesde":"", "fechaInicio":"", "fechaFin":""}</param2>
                </ns1:getElements>
            </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
        - lang: XML (creditos)
          source: |
            <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <SOAP-ENV:Body>
                <ns1:getElements>
                    <param0 xsi:type="xsd:string">fqs5726ta...8oqm4kh76</param0>
                    <param1 xsi:type="xsd:string">creditos</param1>
                    <param2 xsi:type="xsd:string">{"codigoEstacion":"ES12345", "rfcCliente":""}</param2>
                </ns1:getElements>
            </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
  /logout:
    post:
      tags:
        - cerrar sesión
      summary: logout
      description: Cierra la sesión creada con la llamada login.
      consumes:
        - application/xml
      produces:
        - application/xml
      parameters:
        - in: body
          name: body
          description: logout(session)
          schema:
            $ref: '#/definitions/LogoutSchema'
      responses:
        '200':
          description: "Consulta exitosa"
          schema:
            type: "string"
            example: "OK"
      x-code-samples:
        - lang: XML
          source: |
            <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <logout>
                  <param0 xsi:type="xsd:string">oga0hmum6sv7ulvc4plkre07l2</param0>
                </logout>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
definitions:
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  Id:
    type: integer
    format: int64
  Servicio:
    type: object
    required:
      - folio
    properties:
      folio:
        description: Folio del servicio
        type: int32
        example: 1589
      cliente:
        description: Datos del cliente
        allOf:
          - $ref: '#/definitions/Cliente'
      fechaSurtido:
        description: Fecha en la que se realizó el servicio
        type: date-time
        example: '2017-03-23 15:09:02'
      conductor:
        description: Datos del cliente
        allOf:
          - $ref: '#/definitions/Conductor'
      cantidad:
        description: Cantidad recibida en el servicio
        type: float
        example: 26.3200
      producto:
        description: Nombre del producto surtido
        type: string
        example: Pemex Magna
      subtotal:
        description: Subtotal del servicio
        type: float
        example: 363.7500
      tasaImpuesto:
        description: Tasa del impuesto del servicio
        type: float
        example: 16.0000
      importeImpuesto:
        description: Importe del impuesto del servicio
        type: float
        example: 58.2000
      total:
        description: Total del servicio
        type: float
        example: 431.6000
      codigoEstacion:
        description: Código de la estación donde se realizó el servicio
        type: string
        example: ES01594
      autorizacion:
        description: Autorización asignada al conductor
        type: int32
        example: 180
      tipoPago:
        description: Tipo de pago del servicio
        type: int32
        example: 2
      valeUsado:
        description: Vale usado en el servicio
        type: int32
    xml:
      name: Servicio
  User:
    type: object
    properties:
      id:
        description: User ID
        $ref: '#/definitions/Id'
      username:
        description: User supplied username
        type: string
        minLength: 4
        example: John78
      firstName:
        description: User first name
        type: string
        minLength: 1
        example: John
      lastName:
        description: User last name
        type: string
        minLength: 1
        example: Smith
      email:
        description: User email address
        type: string
        format: email
        example: john.smith@example.com
      password:
        type: string
        description: 'User password, MUST contain a mix of upper and lower case letters, as well as digits'
        format: password
        minLength: 8
        pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
        example: drowssaP123
      phone:
        description: User phone number in international format
        type: string
        pattern: "^\\+(?:[0-9]-?){6,14}[0-9]$"
        example: +1-202-555-0192
        x-nullable: true
      userStatus:
        description: User status
        type: integer
        format: int32
    xml:
      name: User
  Cliente:
    type: object
    properties:
      nombre:
        description: Nombre del cliente
        type: string
        example: Pegasus Control S.A. de C.V.
      rfc:
        description: RFC del cliente
        type: string
        minLength: 
        example: PCO960701A49
    xml:
      name: Cliente
  Conductor:
    type: object
    properties:
      nombre:
        description: Nombre del conductor
        type: string
        example: Juan García
      tarjeta:
        description: Tarjeta asignada al conductor
        type: int32
        example: 1111222233334444
      usuario:
        description: Usuario del conductor
        type: string
        example: jgarcia
      vehiculo:
        description: Categories this pet belongs to
        allOf:
          - $ref: '#/definitions/Vehiculo'
    xml:
      name: Conductor
  Vehiculo:
    type: object
    properties:
      noEconomico:
        description: Número del vehículo
        type: int32
        example: 82
      placas:
        description: Placas del vehículo
        type: string
        example: JMM1289
      grupo:
        description: Grupo al que pertenece el vehículo
        type: string
        example: 
      odometro:
        description: Kilometraje recorrido del vehículo
        type: int32
        example: 72362
    xml:
      name: Vehiculo
  Credito:
    type: object
    properties:
      activo:
        description: Indica si el crédito se encuentra activo
        type: boolean
      limiteCredito:
        description: Límite del credito
        type: int32
      saldo:
        description: Saldo actual del credito
        type: float
      estaciones:
        type: object
        properties:
          nombre:
            description: Nombre de la estación
          codigoEstacion:
            description: Código de la estación
    xml:
      name: Credito
  PagoCredito:
    type: object
    properties:
      activo:
        description: Indica si el crédito se encuentra activo
        type: boolean
      limiteCredito:
        description: Límite del credito
        type: int32
      saldo:
        description: Saldo actual del credito
        type: float
      estaciones:
        type: object
        properties:
          nombre:
            description: Nombre de la estación
          codigoEstacion:
            description: Código de la estación
    xml:
      name: PagoCredito
  LoginSchema:
    type: object
    required:
      - user_auth
      - application
    properties:
      user_auth:
        description: Arreglo de identificación del usuario
        type: object
        allOf:
          - $ref: '#/definitions/User_auth'
      application:
        type: string
        default: iRED
    xml:
      name: LoginSchema
  LogoutSchema:
    type: object
    required:
      - user_auth
      - application
    properties:
      session:
        description: ID de la sesión
        type: string
        example: fqs5726ta...8oqm4kh76 
    xml:
      name: LogoutSchema
  User_auth:
    type: object
    required:
      - user_name
      - password
    properties:
      user_name:
        description: Nombre de usuario
        type: string
        example: soporte@ired.mx
      password:
        description: Contraseña cifrada en MD5
        type: password
        example: 3015ca4f270b6938b27c95863174a8db
    xml:
      name: User_auth
  Get:
    type: object
    required:
      - session
      - module
      - filters
    discriminator: module
    properties:
      session:
        description: ID de la sesión
        type: string
        example: fqs5726ta...8oqm4kh76 
      module:
        description: Identificador del modulo
        type: string
      filters:
        description: String en formato JSON, en un arreglo llave => valor
        type: string
    xml:
      name: Get
  ServiceFilters:
    type: object
    description: Es requerido enviar mínimo un filtro
    properties:
      folio:
        description: Obtener un servicio por su número de folio
        type: int32
      folioDesde:
        description: Obtener N servicios desde un folio dado
        type: int32
      fechaInicio:
        description: Obtener N servicios en un rango de fechas
        type: dateTime
      fechaFin:
        description: Obtener N servicios en un rango de fechas
        type: dateTime
    xml:
      name: ServiceFilters
  CreditosFilters:
    type: object
    properties:
      codigoEstacion:
        description: Obtener un servicio por su número de folio
        type: int32
      rfcCliente:
        description: Obtener N servicios desde un folio dado
        type: int32
    xml:
      name: CreditosFilters
  PagosCreditosFilters:
    type: object
    properties:
      fechaInicio:
        description: Fecha de inicio del rango
        type: date-time
      fechaFin:
        description: Fecha de fin del rango
        type: date-time
      montoPagado:
        description: Cantidad pagada
        type: float
    xml:
      name: PagosCreditosFilters
  servicios:
    description: Los servicios son las ventas/compras que se realizan a través de iRED
    allOf:
      - $ref: '#/definitions/Get'
      - type: object
        properties:
          filters:
            type: object
            allOf:
              - $ref: '#/definitions/ServiceFilters'
  creditos:
    description: Los créditos son las definiciones de los montos que una estación pone disponible a una flotilla para comprar, permitiendo pagar posteriormente
    allOf:
      - $ref: '#/definitions/Get'
      - type: object
        properties:
          filters:
            type: object
            allOf:
              - $ref: '#/definitions/CreditosFilters'
  pagosCreditos:
    description: Los pagos de un crédito son los montos que una flotilla paga a la estación para reducir su saldo consumido
    allOf:
      - $ref: '#/definitions/Get'
      - type: object
        properties:
          filters:
            type: object
            allOf:
              - $ref: '#/definitions/PagosCreditosFilters'
  getElementsResp:
    x-extendedDiscriminator: module
    type: object
    required:
      - module
    properties:
      module:
        $ref: '#/definitions/ModuleType'
    x-examples:

  serviciosResp:
    allOf:
      - $ref: "#/definitions/getElementsResp"
      - properties:
          module:
            type: string
            enum:
              - servicios
          respuesta:
            type: object
            title: Respuesta de servicios
            allOf:
              - $ref: '#/definitions/Servicio'
  creditosResp:
    allOf:
      - $ref: "#/definitions/getElementsResp"
      - properties:
          module:
            type: string
            enum:
              - creditos
          respuesta:
            type: object
            title: Respuesta de créditos
            allOf:
              - $ref: '#/definitions/Credito'
  pagosCreditosResp:
    allOf:
      - $ref: "#/definitions/getElementsResp"
      - properties:
          module:
            type: string
            enum:
              - pagosCreditos
          respuesta:
            type: object
            title: Respuesta de pagos de créditos
            allOf:
              - $ref: '#/definitions/PagoCredito'
  ModuleType:
    type: string
    format: enum
    enum:
      - servicios
      - creditos
      - pagosCreditos
  LoginResp:
    type: object
    properties:
      id:
        description: Session ID
        type: int32
        example: fqs5726ta...8oqm4kh76
      module_name:
        description: Nombre del modulo
        type: string
        example: Users
      name_value_list:
        description: Folio del servicio
        type: object
        properties:
          user_id:
            type: string
            example: 3c0881be-3f38-5482-7205-89e7858ef0da5
          user_name:
            type: string
            example: soporte@ired.mx
          user_language:
            type: string
            example: es_es
          user_currency_id:
            type: string
            example: ""
          user_currency_name:
            type: string
            example: Pesos
          is_admin:
            type: boolean
            example: 0
          fecha_servidor:
            type: int32
            example: 290317164604
    xml:
      name: LoginResp
  SoapFault:
    type: object
    properties:
      faultcode:
        description: Fault code
        type: int32
      faultactor:
        description: Fault actor
        type: string
      faultstring:
        description: Fault string
        type: string
      detail:
        description: Detail
        type: string
    xml:
      name: SoapFault
